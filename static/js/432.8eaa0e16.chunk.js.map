{"version":3,"file":"static/js/432.8eaa0e16.chunk.js","mappings":"uQAuJA,UAzFqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,IAAD,CAAMC,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAtD,UACE,SAAC,KAAD,CAAKH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAtC,UACE,SAAC,KAAD,CACEC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,SAAU,SAAAC,GACRC,QAAQC,IAAIF,GACZd,GAASiB,EAAAA,EAAAA,eAAcH,GACxB,EATH,SAWG,gBAAGI,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMP,SAAUK,EAAhB,UACE,UAAC,IAAD,CAAQG,QAAS,EAAGlB,MAAM,aAA1B,WACE,UAAC,KAAD,CAAamB,YAAaH,EAAOT,MAAQU,EAAQV,KAAjD,WACE,SAAC,IAAD,CAAWa,QAAQ,OAAnB,SAA0B,UAC1B,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,OACHhB,KAAK,OACLiB,KAAK,OACLC,QAAQ,SACRC,SAAU,SAAAC,GACR,IAAIC,EAMJ,OAJID,EAAME,OAAS,IACjBD,EAAQ,6BAGHA,CACR,QAGL,UAAC,KAAD,CAAaT,YAAaH,EAAOR,OAASS,EAAQT,MAAlD,WACE,SAAC,IAAD,CAAWY,QAAQ,QAAnB,SAA2B,mBAC3B,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,QACHhB,KAAK,QACLiB,KAAK,QACLC,QAAQ,SACRC,SAAU,SAAAC,GACR,IAAIC,EAMJ,OAJID,EAAME,OAAS,IACjBD,EAAQ,6BAGHA,CACR,QAGL,UAAC,KAAD,CAAaT,YAAaH,EAAOP,UAAYQ,EAAQR,SAArD,WACE,SAAC,IAAD,CAAWW,QAAQ,WAAnB,SAA8B,cAC9B,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,WACHhB,KAAK,WACLiB,KAAK,WACLC,QAAQ,SACRC,SAAU,SAAAC,GACR,IAAIC,EAMJ,OAJID,EAAME,OAAS,IACjBD,EAAQ,+CAGHA,CACR,KAEH,SAAC,KAAD,UAAmBZ,EAAOP,eAE5B,SAAC,IAAD,CAAQe,KAAK,SAASM,YAAY,SAASC,MAAM,OAAjD,SAAwD,gBA7D7D,OAuEV,C","sources":["pages/RegisterPage.jsx"],"sourcesContent":["// import React from 'react';\n// import { useForm } from 'react-hook-form';\n// import { useDispatch } from 'react-redux';\n// import { registerThunk } from 'redux/operations';\n\n// const RegisterPage = () => {\n//   const {\n//     register,\n//     handleSubmit,\n//     reset,\n//     formState: { errors },\n//   } = useForm();\n\n//   const dispatch = useDispatch();\n\n//   const onSubmit = data => {\n//     dispatch(registerThunk(data));\n//     reset();\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit(onSubmit)}>\n//       <label>\n//         Name\n//         <input {...register('name', { required: true })} type=\"text\" />\n//         {errors.name && <span>This field is required</span>}\n//       </label>\n//       <label>\n//         Email\n//         <input {...register('email', { required: true })} type=\"email\" />\n//         {errors.email && <span>This field is required</span>}\n//       </label>\n//       <label>\n//         Password\n//         <input\n//           {...register('password', { required: true, minLength: 7 })}\n//           type=\"password\"\n//         />\n//         {errors.password && <span>This field is required</span>}\n//       </label>\n\n//       <button type=\"submit\">Sign Up</button>\n//     </form>\n//   );\n// };\n\n// export default RegisterPage;\n\nimport { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { registerThunk } from 'redux/operations';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik\n          initialValues={{\n            name: '',\n            email: '',\n            password: '',\n          }}\n          onSubmit={values => {\n            console.log(values);\n            dispatch(registerThunk(values));\n          }}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl isInvalid={!!errors.name && touched.name}>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"text\"\n                    variant=\"filled\"\n                    validate={value => {\n                      let error;\n\n                      if (value.length < 6) {\n                        error = 'This field must be filled';\n                      }\n\n                      return error;\n                    }}\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.email && touched.email}>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    validate={value => {\n                      let error;\n\n                      if (value.length < 0) {\n                        error = 'This field must be filled';\n                      }\n\n                      return error;\n                    }}\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    validate={value => {\n                      let error;\n\n                      if (value.length < 6) {\n                        error = 'Password must contain at least 6 characters';\n                      }\n\n                      return error;\n                    }}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Sign In\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n};\nexport default RegisterPage;\n"],"names":["dispatch","useDispatch","bg","align","justify","h","p","rounded","w","initialValues","name","email","password","onSubmit","values","console","log","registerThunk","handleSubmit","errors","touched","spacing","isInvalid","htmlFor","as","Input","id","type","variant","validate","value","error","length","colorScheme","width"],"sourceRoot":""}